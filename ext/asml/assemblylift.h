// Generated by `wit-bindgen` 0.8.0. DO NOT EDIT!
#ifndef __BINDINGS_ASSEMBLYLIFT_H
#define __BINDINGS_ASSEMBLYLIFT_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

typedef struct {
  char*ptr;
  size_t len;
} assemblylift_string_t;

typedef uint8_t akkoro_assemblylift_asml_rt_log_level_t;

#define AKKORO_ASSEMBLYLIFT_ASML_RT_LOG_LEVEL_DEBUG 0
#define AKKORO_ASSEMBLYLIFT_ASML_RT_LOG_LEVEL_TRACE 1
#define AKKORO_ASSEMBLYLIFT_ASML_RT_LOG_LEVEL_INFO 2
#define AKKORO_ASSEMBLYLIFT_ASML_RT_LOG_LEVEL_WARN 3
#define AKKORO_ASSEMBLYLIFT_ASML_RT_LOG_LEVEL_ERROR 4

typedef struct {
  uint8_t *ptr;
  size_t len;
} akkoro_assemblylift_asml_rt_bytes_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} assemblylift_list_u8_t;

typedef uint8_t akkoro_assemblylift_asml_io_poll_error_t;

#define AKKORO_ASSEMBLYLIFT_ASML_IO_POLL_ERROR_NOT_READY 0
#define AKKORO_ASSEMBLYLIFT_ASML_IO_POLL_ERROR_INVALID_IOID 1

typedef uint32_t akkoro_assemblylift_asml_io_ioid_t;

typedef uint8_t akkoro_assemblylift_asml_io_io_error_t;

#define AKKORO_ASSEMBLYLIFT_ASML_IO_IO_ERROR_COORDS_NOT_FOUND 0
#define AKKORO_ASSEMBLYLIFT_ASML_IO_IO_ERROR_INVALID_COORDS 1
#define AKKORO_ASSEMBLYLIFT_ASML_IO_IO_ERROR_INVALID_IOID 2

// Imported Functions from `akkoro:assemblylift/asml-io`
bool akkoro_assemblylift_asml_io_invoke(assemblylift_string_t *path, assemblylift_string_t *input, akkoro_assemblylift_asml_io_ioid_t *ret, akkoro_assemblylift_asml_io_io_error_t *err);
bool akkoro_assemblylift_asml_io_poll(akkoro_assemblylift_asml_io_ioid_t ioid, assemblylift_list_u8_t *ret, akkoro_assemblylift_asml_io_poll_error_t *err);

// Imported Functions from `akkoro:assemblylift/asml-rt`
void akkoro_assemblylift_asml_rt_success(akkoro_assemblylift_asml_rt_bytes_t *response);
void akkoro_assemblylift_asml_rt_failure(akkoro_assemblylift_asml_rt_bytes_t *response);
void akkoro_assemblylift_asml_rt_log(akkoro_assemblylift_asml_rt_log_level_t level, assemblylift_string_t *context, assemblylift_string_t *message);
void akkoro_assemblylift_asml_rt_get_input(assemblylift_list_u8_t *ret);

// Helper Functions

void akkoro_assemblylift_asml_rt_bytes_free(akkoro_assemblylift_asml_rt_bytes_t *ptr);
void assemblylift_list_u8_free(assemblylift_list_u8_t *ptr);
void assemblylift_string_set(assemblylift_string_t *ret, const char*s);
void assemblylift_string_dup(assemblylift_string_t *ret, const char*s);
void assemblylift_string_free(assemblylift_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
