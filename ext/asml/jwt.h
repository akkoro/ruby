// Generated by `wit-bindgen` 0.8.0. DO NOT EDIT!
#ifndef __BINDINGS_JWT_H
#define __BINDINGS_JWT_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

typedef struct {
  char*ptr;
  size_t len;
} jwt_string_t;

typedef struct {
  bool valid;
} akkoro_jwt_decoder_verify_result_t;

typedef struct {
  jwt_string_t iss;
  jwt_string_t aud;
} akkoro_jwt_decoder_validation_params_t;

typedef uint8_t akkoro_jwt_decoder_jwt_error_t;

#define AKKORO_JWT_DECODER_JWT_ERROR_INVALID_TOKEN 0
#define AKKORO_JWT_DECODER_JWT_ERROR_INVALID_JWKS 1

// Imported Functions from `akkoro:jwt/decoder`
bool akkoro_jwt_decoder_decode_verify(jwt_string_t *token, jwt_string_t *jwks, akkoro_jwt_decoder_validation_params_t *params, akkoro_jwt_decoder_verify_result_t *ret, akkoro_jwt_decoder_jwt_error_t *err);

// Helper Functions

void akkoro_jwt_decoder_validation_params_free(akkoro_jwt_decoder_validation_params_t *ptr);
void jwt_string_set(jwt_string_t *ret, const char*s);
void jwt_string_dup(jwt_string_t *ret, const char*s);
void jwt_string_free(jwt_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
